generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ColorScheme {
  DARK
  LIGHT
}

model User {
  id       String   @id @default(cuid())
  name     String
  pronouns String?
  email    String?  @unique
  password String?
  isGuest  Boolean
  joinedAt DateTime @default(now())
  avatar   String?

  UserPreferences UserPreferences?

  ownedClasses Class[] @relation(name: "Owner")

  taughtClasses         Class[]                @relation(name: "taughtClasses")
  memberClasses         Class[]                @relation(name: "memberClasses")
  AssignmentSubmissions AssignmentSubmission[]
  FileObject            FileObject[]
}

model UserPreferences {
  id                 Int         @id @default(autoincrement())
  theme              ColorScheme @default(LIGHT)
  notifyByEmail      Boolean     @default(true)
  assignmentColoring Boolean     @default(true)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Class {
  id    String @id @default(cuid())
  name  String
  color String // Hex color

  owner   User   @relation(name: "Owner", fields: [ownerId], references: [id])
  ownerId String

  assignments Assignment[] @relation(name: "assignments")

  teachers User[]         @relation(name: "taughtClasses")
  members  User[]         @relation(name: "memberClasses")
  invites  ClassInvites[] @relation(name: "invites")
}

model ClassInvites {
  id String @id @default(cuid())

  createdAt  DateTime @default(now())
  expireTime Int?

  timesUsed Int @default(0)

  Class   Class?  @relation("invites", fields: [classId], references: [id])
  classId String?
}

model Assignment {
  id                   String                 @id @default(cuid())
  name                 String
  description          String
  color                String
  createdAt            DateTime               @default(now())
  dueAt                DateTime?              @db.Timestamp(0)
  maxGrade             Int?
  assignmentSubmission AssignmentSubmission[]
  Class                Class?                 @relation("assignments", fields: [classId], references: [id])
  classId              String?
}

model AssignmentSubmission {
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  member       User       @relation(fields: [userId], references: [id])
  assignmentId String
  userId       String
  markdownData String
  grade        Int? // out of Assignment.maxGrade
  submitted    Boolean
  submittedAt  DateTime?

  @@id([assignmentId, userId])
}

model FileObject {
  id      String @id @default(cuid())
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}
